
/*
 * Activity Microservice
 * This is the API spec for the activity microservice. The purpose of this microservice is to capture activities done by the user within the scope of this application, such as site visits.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: glazu@deloittece.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package vott.models.dto.activities;

        import java.util.Objects;
        import java.util.Arrays;
        import com.google.gson.TypeAdapter;
        import com.google.gson.annotations.JsonAdapter;
        import com.google.gson.annotations.SerializedName;
        import com.google.gson.stream.JsonReader;
        import com.google.gson.stream.JsonWriter;
        import java.io.IOException;
        import java.math.BigDecimal;
        import java.util.ArrayList;
        import java.util.List;

/**
 * Activity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-22T09:31:08.759Z[GMT]")
public class Activity {
    @SerializedName("id")
    private BigDecimal id = null;

    @SerializedName("parentId")
    private String parentId = null;

    /**
     * Gets or Sets activityType
     */
    @JsonAdapter(ActivityTypeEnum.Adapter.class)
    public enum ActivityTypeEnum {
        VISIT("visit"),
        WAIT("wait"),
        UNACCOUNTABLE_TIME("unaccountable time");

        private String value;

        ActivityTypeEnum(String value) {
            this.value = value;
        }
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
        public static ActivityTypeEnum fromValue(String text) {
            for (ActivityTypeEnum b : ActivityTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }
        public static class Adapter extends TypeAdapter<ActivityTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ActivityTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ActivityTypeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return ActivityTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }  @SerializedName("activityType")
    private ActivityTypeEnum activityType = null;

    @SerializedName("startTime")
    private String startTime = null;

    @SerializedName("activityDay")
    private String activityDay = null;

    @SerializedName("endTime")
    private String endTime = null;

    @SerializedName("testStationName")
    private String testStationName = null;

    @SerializedName("testStationPNumber")
    private String testStationPNumber = null;

    @SerializedName("testStationEmail")
    private String testStationEmail = null;

    /**
     * Gets or Sets testStationType
     */
    @JsonAdapter(TestStationTypeEnum.Adapter.class)
    public enum TestStationTypeEnum {
        ATF("atf"),
        GVTS("gvts"),
        HQ("hq");

        private String value;

        TestStationTypeEnum(String value) {
            this.value = value;
        }
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
        public static TestStationTypeEnum fromValue(String text) {
            for (TestStationTypeEnum b : TestStationTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }
        public static class Adapter extends TypeAdapter<TestStationTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TestStationTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TestStationTypeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return TestStationTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }  @SerializedName("testStationType")
    private TestStationTypeEnum testStationType = null;

    @SerializedName("testerName")
    private String testerName = null;

    @SerializedName("testerStaffId")
    private String testerStaffId = null;

    @SerializedName("testerEmail")
    private String testerEmail = null;

    @SerializedName("waitReason")
    private List<String> waitReason = null;

    @SerializedName("notes")
    private String notes = null;

    public Activity id(BigDecimal id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     * @return id
     **/

    public BigDecimal getId() {
        return id;
    }

    public void setId(BigDecimal id) {
        this.id = id;
    }

    public Activity parentId(String parentId) {
        this.parentId = parentId;
        return this;
    }

    /**
     * Get parentId
     * @return parentId
     **/
    public String getParentId() {
        return parentId;
    }

    public void setParentId(String parentId) {
        this.parentId = parentId;
    }

    public Activity activityType(ActivityTypeEnum activityType) {
        this.activityType = activityType;
        return this;
    }

    /**
     * Get activityType
     * @return activityType
     **/
    public ActivityTypeEnum getActivityType() {
        return activityType;
    }

    public void setActivityType(ActivityTypeEnum activityType) {
        this.activityType = activityType;
    }

    public Activity startTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get startTime
     * @return startTime
     **/
    public String getStartTime() {
        return startTime;
    }

    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }

    public Activity activityDay(String activityDay) {
        this.activityDay = activityDay;
        return this;
    }

    /**
     * Get activityDay
     * @return activityDay
     **/
    public String getActivityDay() {
        return activityDay;
    }

    public void setActivityDay(String activityDay) {
        this.activityDay = activityDay;
    }

    public Activity endTime(String endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get endTime
     * @return endTime
     **/

    public String getEndTime() {
        return endTime;
    }

    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }

    public Activity testStationName(String testStationName) {
        this.testStationName = testStationName;
        return this;
    }

    /**
     * Get testStationName
     * @return testStationName
     **/

    public String getTestStationName() {
        return testStationName;
    }

    public void setTestStationName(String testStationName) {
        this.testStationName = testStationName;
    }

    public Activity testStationPNumber(String testStationPNumber) {
        this.testStationPNumber = testStationPNumber;
        return this;
    }

    /**
     * Get testStationPNumber
     * @return testStationPNumber
     **/

    public String getTestStationPNumber() {
        return testStationPNumber;
    }

    public void setTestStationPNumber(String testStationPNumber) {
        this.testStationPNumber = testStationPNumber;
    }

    public Activity testStationEmail(String testStationEmail) {
        this.testStationEmail = testStationEmail;
        return this;
    }

    /**
     * Get testStationEmail
     * @return testStationEmail
     **/

    public String getTestStationEmail() {
        return testStationEmail;
    }

    public void setTestStationEmail(String testStationEmail) {
        this.testStationEmail = testStationEmail;
    }

    public Activity testStationType(TestStationTypeEnum testStationType) {
        this.testStationType = testStationType;
        return this;
    }

    /**
     * Get testStationType
     * @return testStationType
     **/

    public TestStationTypeEnum getTestStationType() {
        return testStationType;
    }

    public void setTestStationType(TestStationTypeEnum testStationType) {
        this.testStationType = testStationType;
    }

    public Activity testerName(String testerName) {
        this.testerName = testerName;
        return this;
    }

    /**
     * Get testerName
     * @return testerName
     **/

    public String getTesterName() {
        return testerName;
    }

    public void setTesterName(String testerName) {
        this.testerName = testerName;
    }

    public Activity testerStaffId(String testerStaffId) {
        this.testerStaffId = testerStaffId;
        return this;
    }

    /**
     * Get testerStaffId
     * @return testerStaffId
     **/

    public String getTesterStaffId() {
        return testerStaffId;
    }

    public void setTesterStaffId(String testerStaffId) {
        this.testerStaffId = testerStaffId;
    }

    public Activity testerEmail(String testerEmail) {
        this.testerEmail = testerEmail;
        return this;
    }

    /**
     * Required if the activity type is \&quot;visit\&quot;
     * @return testerEmail
     **/
    public String getTesterEmail() {
        return testerEmail;
    }

    public void setTesterEmail(String testerEmail) {
        this.testerEmail = testerEmail;
    }

    public Activity waitReason(List<String> waitReason) {
        this.waitReason = waitReason;
        return this;
    }

    public Activity addWaitReasonItem(String waitReasonItem) {
        if (this.waitReason == null) {
            this.waitReason = new ArrayList<String>();
        }
        this.waitReason.add(waitReasonItem);
        return this;
    }

    /**
     * Get waitReason
     * @return waitReason
     **/

    public List<String> getWaitReason() {
        return waitReason;
    }

    public void setWaitReason(List<String> waitReason) {
        this.waitReason = waitReason;
    }

    public Activity notes(String notes) {
        this.notes = notes;
        return this;
    }

    /**
     * Get notes
     * @return notes
     **/

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Activity activity = (Activity) o;
        return Objects.equals(this.id, activity.id) &&
                Objects.equals(this.parentId, activity.parentId) &&
                Objects.equals(this.activityType, activity.activityType) &&
                Objects.equals(this.startTime, activity.startTime) &&
                Objects.equals(this.activityDay, activity.activityDay) &&
                Objects.equals(this.endTime, activity.endTime) &&
                Objects.equals(this.testStationName, activity.testStationName) &&
                Objects.equals(this.testStationPNumber, activity.testStationPNumber) &&
                Objects.equals(this.testStationEmail, activity.testStationEmail) &&
                Objects.equals(this.testStationType, activity.testStationType) &&
                Objects.equals(this.testerName, activity.testerName) &&
                Objects.equals(this.testerStaffId, activity.testerStaffId) &&
                Objects.equals(this.testerEmail, activity.testerEmail) &&
                Objects.equals(this.waitReason, activity.waitReason) &&
                Objects.equals(this.notes, activity.notes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, parentId, activityType, startTime, activityDay, endTime, testStationName, testStationPNumber, testStationEmail, testStationType, testerName, testerStaffId, testerEmail, waitReason, notes);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Activity {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
        sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    activityDay: ").append(toIndentedString(activityDay)).append("\n");
        sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("    testStationName: ").append(toIndentedString(testStationName)).append("\n");
        sb.append("    testStationPNumber: ").append(toIndentedString(testStationPNumber)).append("\n");
        sb.append("    testStationEmail: ").append(toIndentedString(testStationEmail)).append("\n");
        sb.append("    testStationType: ").append(toIndentedString(testStationType)).append("\n");
        sb.append("    testerName: ").append(toIndentedString(testerName)).append("\n");
        sb.append("    testerStaffId: ").append(toIndentedString(testerStaffId)).append("\n");
        sb.append("    testerEmail: ").append(toIndentedString(testerEmail)).append("\n");
        sb.append("    waitReason: ").append(toIndentedString(waitReason)).append("\n");
        sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
